{
  "_args": [
    [
      {
        "raw": "sequelize-tokenify",
        "scope": null,
        "escapedName": "sequelize-tokenify",
        "name": "sequelize-tokenify",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/psari/Desktop/phase1/w4/express-url-shortener"
    ]
  ],
  "_from": "sequelize-tokenify@latest",
  "_id": "sequelize-tokenify@0.1.5",
  "_inCache": true,
  "_location": "/sequelize-tokenify",
  "_nodeVersion": "4.4.7",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/sequelize-tokenify-0.1.5.tgz_1487745232179_0.8820769395679235"
  },
  "_npmUser": {
    "name": "pipll",
    "email": "gennadiy.kozlenko@gmail.com"
  },
  "_npmVersion": "2.15.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sequelize-tokenify",
    "scope": null,
    "escapedName": "sequelize-tokenify",
    "name": "sequelize-tokenify",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/sequelize-tokenify/-/sequelize-tokenify-0.1.5.tgz",
  "_shasum": "f5ae998d167f61b8376d034832e94817f727b457",
  "_shrinkwrap": null,
  "_spec": "sequelize-tokenify",
  "_where": "/home/psari/Desktop/phase1/w4/express-url-shortener",
  "author": {
    "name": "Gennadiy Kozlenko",
    "email": "gennadiy.kozlenko@gmail.com",
    "url": "https://github.com/pipll/"
  },
  "bugs": {
    "url": "https://github.com/pipll/sequelize-tokenify/issues"
  },
  "dependencies": {
    "lodash": "^4.17.4",
    "randomstring": "^1.1.5"
  },
  "description": "Add unique tokens to sequelize models",
  "devDependencies": {
    "bluebird": "^3.4.7",
    "chai": "^3.5.0",
    "chai-as-promised": "^6.0.0",
    "mocha": "^3.2.0",
    "mysql": "^2.13.0",
    "sequelize": "^3.30.2"
  },
  "directories": {},
  "dist": {
    "shasum": "f5ae998d167f61b8376d034832e94817f727b457",
    "tarball": "https://registry.npmjs.org/sequelize-tokenify/-/sequelize-tokenify-0.1.5.tgz"
  },
  "gitHead": "a36559a7552f09f0e6e6c7de649901003308b502",
  "homepage": "https://github.com/pipll/sequelize-tokenify#readme",
  "keywords": [
    "token",
    "sequelize",
    "sequelize-plugin",
    "orm"
  ],
  "license": "MIT",
  "main": "index",
  "maintainers": [
    {
      "name": "pipll",
      "email": "gennadiy.kozlenko@gmail.com"
    }
  ],
  "name": "sequelize-tokenify",
  "optionalDependencies": {},
  "readme": "# sequelize-tokenify\n\n[![Build Status](https://travis-ci.org/pipll/sequelize-tokenify.svg?branch=master)](https://travis-ci.org/pipll/sequelize-tokenify) [![npm](https://img.shields.io/npm/v/sequelize-tokenify.svg)](https://www.npmjs.com/package/sequelize-tokenify) [![Code Climate](https://codeclimate.com/github/pipll/sequelize-tokenify/badges/gpa.svg)](https://codeclimate.com/github/pipll/sequelize-tokenify) ![GitHub license](https://img.shields.io/github/license/pipll/sequelize-tokenify.svg)\n\nAdd unique tokens to sequelize models.\n\n## Installation\n\n`npm install sequelize-tokenify`\n\n## Usage\n\n```javascript\nvar SequelizeTokenify = require('sequelize-tokenify');\n\nmodule.exports = function(sequelize, Sequelize) {\n\n    var User = sequelize.define('User', {\n        id: {\n            type: Sequelize.INTEGER,\n            primaryKey: true,\n            autoIncrement: true\n        },\n        email: {\n            type: Sequelize.STRING,\n            unique: true\n        },\n        recovery_token: {\n            type: Sequelize.STRING,\n            unique: true\n        }\n    });\n\n    SequelizeTokenify.tokenify(User, {\n        field: 'recovery_token'\n    });\n\n    return User;\n};\n```\n\n## Options\n\n`tokenify` method takes an options array as it's second parameter.\n\n```javascript\nSequelizeTokenify.tokenify(User, {\n    field: 'recovery_token'\n});\n```\n\nAvailable options:\n\n- `field` - Field name in the model to store token value. Default value: `token`.\n- `scope` - Array of field names in the model that are used to limit the uniqueness token generation.\n- `length` - Length of the token value. Default value: `10`.\n- `charset` - Character set for the token value. Default value: `alphanumeric`. Available values:\n    - `alphanumeric` - `[0-9a-zA-Z]`\n    - `alphabetic` - `[a-zA-Z]`\n    - `numeric` - `[0-9]`\n    - `hex` - `[0-9a-f]`\n\nAll options are optional.\n\n## Methods\n\n`sequelize-tokenify` module creates several instance methods with names depend on the token field:\n\n- `generate[TokenField]` - Generates a new token without saving the model.\n- `update[TokenField]` - Generates a new token and saves the model.\n\nFor `recovery_token` field module will create these methods:\n\n- `generateRecoveryToken`\n- `updateRecoveryToken`\n\nSo you can use this module several times for the same model:\n\n```javascript\nvar SequelizeTokenify = require('sequelize-tokenify');\n\nmodule.exports = function(sequelize, Sequelize) {\n\n    var User = sequelize.define('User', {\n        id: {\n            type: Sequelize.INTEGER,\n            primaryKey: true,\n            autoIncrement: true\n        },\n        email: {\n            type: Sequelize.STRING,\n            unique: true\n        },\n        token: {\n            type: Sequelize.STRING,\n            unique: true\n        },\n        recovery_token: {\n            type: Sequelize.STRING,\n            unique: true\n        }\n    });\n\n    // For token field\n    SequelizeTokenify.tokenify(User);\n\n    // For recovery_token field\n    SequelizeTokenify.tokenify(User, {\n        field: 'recovery_token'\n    });\n\n    return User;\n};\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pipll/sequelize-tokenify.git"
  },
  "scripts": {
    "prepublish": "npm prune",
    "test": "mocha ./test/*"
  },
  "version": "0.1.5"
}
